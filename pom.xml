<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- 此部分不能使用 <properties/...> 中的元素来取代，必须直接给出具体的内容  -->
    <groupId>org.wangpai.calculator</groupId>
    <artifactId>calculator-windows-ui</artifactId>
    <version>4.0</version>
    <packaging>pom</packaging>

    <modules>
        <module>calculator-entrance</module>
        <module>calculator-ui</module>
        <module>calculator-backend</module>
    </modules>

    <properties>
        <!-- 不加此项，JavaFX 打包出来中文会乱码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>

        <!-- 凡是自定义的属性，都要加 .custom 后缀，以防与已有的预置属性相冲突 -->
        <project.version.custom>4.0</project.version.custom>
        <mathlab-fx.version.custom>1.0</mathlab-fx.version.custom>

        <junit.version.custom>5.8.2</junit.version.custom>
        <lombok.version.custom>1.18.20</lombok.version.custom>
        <openjfx.version.custom>17.0.1</openjfx.version.custom>
        <spring.version.custom>5.3.9</spring.version.custom>
        <log4j2.version.custom>2.15.0</log4j2.version.custom>
        <slf4j.version.custom>2.15.0</slf4j.version.custom>

        <mainclass.custom>org.wangpai.calculator.CalculatorApplication</mainclass.custom>
    </properties>

    <dependencyManagement>
        <dependencies>

            <!-- 这些依赖是笔者自己的另一个项目：mathlab-fx 的子 Maven 模块 -->
            <dependency>
                <groupId>org.wangpai.mathlab</groupId>
                <artifactId>exception</artifactId>
                <version>${mathlab-fx.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.wangpai.mathlab</groupId>
                <artifactId>mathlib</artifactId>
                <version>${mathlab-fx.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.wangpai.mathlab</groupId>
                <artifactId>mathexp</artifactId>
                <version>${mathlab-fx.version.custom}</version>
            </dependency>
            <!-- *************************************************************** -->

            <dependency>
                <groupId>org.wangpai.calculator</groupId>
                <artifactId>calculator-entrance</artifactId>
                <version>${project.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.wangpai.calculator</groupId>
                <artifactId>calculator-ui</artifactId>
                <version>${project.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.wangpai.calculator</groupId>
                <artifactId>calculator-backend</artifactId>
                <version>${project.version.custom}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version.custom}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j2.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j2.version.custom}</version>
            </dependency>
            <!-- 设置 SLF4J 与之绑定的日志包。无需提供 SLF4J 的 JAR 包，因为 Lombok 已经提供了 -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${slf4j.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${junit.version.custom}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-controls</artifactId>
                <version>${openjfx.version.custom}</version>
            </dependency>
            <dependency>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-fxml</artifactId>
                <version>${openjfx.version.custom}</version>
            </dependency>
            <!-- 提供注解 @Controller 等 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version.custom}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>

            <!-- 此插件必须放在父 POM 中  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!--
                            设置将依赖整合到一个自定义名称的 JAR 包。
                            如果不设置此项，依赖将整合到 Maven 无插件时的默认 JAR 包，并生成一个前缀为 original- 的无依赖 JAR 包
                             -->
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <!-- 设置生成的 JAR 包后缀名 -->
                            <shadedClassifierName>shaded-with-dependencies</shadedClassifierName>
                            <!-- 设置程序运行入口 -->
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>${mainclass.custom}</mainClass>
                                </transformer>
                            </transformers>
                            <!-- 设置 JAR 包输出目录 -->
                            <outputDirectory>${project.build.directory}/#maven-shade-plugin</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 此插件暂时没起到什么作用，留着以后备用 -->
            <!--            &lt;!&ndash; 此插件必须放在父 POM 中  &ndash;&gt;-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-assembly-plugin</artifactId>-->
            <!--                <version>3.3.0</version>-->
            <!--                <executions>-->
            <!--                    &lt;!&ndash;-->
            <!--                    执行本插件的方法为，在主目录下执行如下命令：-->
            <!--                    mvn package assembly:single-->

            <!--                    对于 IntelliJ IDEA，生成的 JAR 包位于每个模块下的文件夹 target-->
            <!--                    &ndash;&gt;-->
            <!--                    <execution>-->
            <!--                        <id>make-assembly</id>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            &lt;!&ndash; 此处 IntelliJ IDEA 可能会报红，这是正常现象  &ndash;&gt;-->
            <!--                            <goal>single</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--                <configuration>-->
            <!--                    <archive>-->
            <!--                        <manifest>-->
            <!--                            &lt;!&ndash; 配置程序运行入口所在的类 &ndash;&gt;-->
            <!--                            <mainClass>${mainClass}</mainClass>-->
            <!--                        </manifest>-->
            <!--                    </archive>-->
            <!--                    &lt;!&ndash; 设置 JAR 包输出目录 &ndash;&gt;-->
            <!--                    <outputDirectory>${project.build.directory}/#maven-assembly-plugin</outputDirectory>-->
            <!--                    &lt;!&ndash; 设置打包后的 JAR 包的目录结构为默认 &ndash;&gt;-->
            <!--                    <descriptorRefs>-->
            <!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
            <!--                    </descriptorRefs>-->
            <!--                </configuration>-->
            <!--            </plugin>-->

            <!-- 此插件暂时没起到什么作用，留着以后备用 -->
            <!--
            此插件是用于拷贝该模块的资源文件指指定目录。
            但生成的资源文件只包含本模块的资源文件，不包括其依赖的其它模块的资源文件
            此插件可在生命周期 package 中被执行。
            此插件往往与插件 maven-jar-plugin、maven-dependency-plugin 一起使用
            -->
            <!--            <plugin>-->
            <!--                <artifactId>maven-resources-plugin</artifactId>-->
            <!--                <version>3.2.0</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>copy-resources</id>-->
            <!--                        &lt;!&ndash; 设置此插件执行的阶段，可更改为其它阶段 &ndash;&gt;-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>copy-resources</goal>-->
            <!--                        </goals>-->
            <!--                        <configuration>-->
            <!--                            &lt;!&ndash; 设置资源文件输出目录 &ndash;&gt;-->
            <!--                            <outputDirectory>${project.build.directory}/#maven-resources-plugin</outputDirectory>-->
            <!--                            <resources>-->
            <!--                                <resource>-->
            <!--                                    &lt;!&ndash; 设置原资源文件所在目录 &ndash;&gt;-->
            <!--                                    <directory>src/main/resources</directory>-->
            <!--                                </resource>-->
            <!--                            </resources>-->
            <!--                        </configuration>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

        </plugins>
    </build>

</project>